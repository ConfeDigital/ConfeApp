"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--3o^1i+zd4%r)qv%08d3zp96u75_mt3s^yh4o66d%ol+#&rex)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CSRF_TRUSTED_ORIGINS = [
    "https://kaiuki.com",
    "https://www.kaiuki.com"
]

ALLOWED_HOSTS = ["127.0.0.1","24.144.94.106", "kaiuki.com", "www.kaiuki.com", "localhost"]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        #'rest_framework_simplejwt.authentication.JWTAuthentication',
        'api.authentication.MultipleAuthAuthentication',
        #"rest_framework.authentication.TokenAuthentication",
        #'rest_framework.authentication.SessionAuthentication',
        #'django_auth_adfs.rest_framework.AdfsAccessTokenAuthentication',
    ),
    

    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

client_secret = os.getenv('CLIENT_SECRET')
client_id = os.getenv('CLIENT_ID')
tenant_id = os.getenv('TENANT_ID')
email_user = os.getenv('EMAIL_USER')

ADFS_ISSUER   = f"https://login.microsoftonline.com/{tenant_id}/v2.0"
ADFS_AUDIENCE = client_id
# JWK_URL= f"https://login.microsoftonline.com/{tenant_id}/discovery/v2.0/keys"  # Azure AD JWKS URL

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "daphne",
    'django.contrib.staticfiles',
    'django_auth_adfs',
    "rest_framework",
    "djoser",
    "corsheaders",
    "channels",
    'simple_history',
    'storages',
    "api",
    "mycalendar",
    "notifications",
    "cuestionarios", 
    "tablas_de_equivalencia",
    "discapacidad",
    "candidatos",
    'postalcodes_mexico',
    "reports",
    "agencia", 
    "seguimiento",
    "centros",
    "communications",
]

AUTH_ADFS = {
    "AUDIENCE": client_id,
    "CLIENT_ID": client_id,
    'CLIENT_SECRET': client_secret,
    "CLAIM_MAPPING": {
        "first_name": "given_name",
        "last_name": "family_name",
    },
    "USERNAME_CLAIM": "preferred_username",
    'GROUPS_CLAIM': None,
    # 'MIRROR_GROUPS': True,
    "TENANT_ID": tenant_id,
    "RELYING_PARTY_ID": client_id, 
    'LOGIN_EXEMPT_URLS': [
        '^api', "^admin", "^auth", "public/", "^media", "^static", "^$", # Assuming you API is available at /api
    ],
    'CREATE_NEW_USERS': True,
    # 'SCOPES': 'api://confe.app.org/read',
    'SCOPES': [
        'read', 
        'openid', 
    ],
    'VERSION': 'v2.0',
}

AUTHENTICATION_BACKENDS = [
    'django_auth_adfs.backend.AdfsAuthCodeBackend',  # ADFS backend for user authentication
    'django_auth_adfs.backend.AdfsAccessTokenBackend',
    'django.contrib.auth.backends.ModelBackend',    # Optional: default backend
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_auth_adfs.middleware.LoginRequiredMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], #'DIRS': [os.path.join(BASE_DIR, 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

ASGI_APPLICATION = "backend.asgi.application"
# Redis cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Use the Redis DB index (default is 0 or 1)
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'my_app'  # Optional: Prefix to distinguish your cache keys
    }
}
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [("127.0.0.1", 6379)],
            "capacity": 1000,
            "expiry": 600,
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DOMAIN = os.getenv('DOMAIN')
SITE_NAME = os.getenv('SITE_NAME')

# Email
EMAIL_BACKEND = 'api.email_backends.MicrosoftGraphEmailBackend'
DEFAULT_FROM_EMAIL = email_user
SERVER_EMAIL = email_user


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = "es-es"


TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_URL':'password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL':'email/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    #'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,
    'SERIALIZERS':{
        'user_create': 'candidatos.serializers.CandidateRegisterSerializer',
        'user': 'api.serializers.UserSerializer',
        'user_delete': 'api.serializers.UserDeleteSerializer',
        'current_user': 'api.serializers.UserSerializer',
    },
    'EMAIL': {
        'activation': 'api.email.ActivationEmail',
        'confirmation': 'api.email.ConfirmationEmail',
        'password_reset': 'api.email.PasswordResetEmail',
        'password_changed_confirmation': 'api.email.PasswordChangedConfirmationEmail',
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:5173',
    'http://localhost:5173',
    'http://localhost:80',
    'http://127.0.0.1:8000',
    'https://kaiuki.com',
    'https://www.kaiuki.com',
]
CORS_ALLOWS_CREDENTIALS = True

AUTH_USER_MODEL = 'api.CustomUser'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

